/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package summative;

import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.Timer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.imageio.*;
import java.awt.image.*;
import java.io.*;
import javax.swing.JLabel;


public class Board  extends JPanel implements Runnable, MouseListener
{
boolean ingame = true;
private Dimension d;
int BOARD_WIDTH=500;
int BOARD_HEIGHT=500;
int x = 0;
BufferedImage img;
String message = "Click Board to Start";
private Thread animator;
Player p;
Enemy [] army = new Enemy[10];
 
    public Board()
    {
          addKeyListener(new TAdapter());
         addMouseListener(this);
        setFocusable(true);
        d = new Dimension(BOARD_WIDTH, BOARD_HEIGHT);
        setBackground(Color.black);
        p= new Player (BOARD_WIDTH/2,BOARD_HEIGHT-60,5);
        int enemyX=10;
        int enemyY=10;
        for (int i=0; i<army.length; i++){
          army[i]= new Enemy (enemyX,enemyY,10);
          enemyX+=40; //creating row of enemy 40 untis apart from each other
          if (i==4){ //new row after 5 enemy sad faces
              enemyX=10; //set starting enemy back to original x position
              enemyY+=40; 
          }
          
    }
       
           /*         
             try {
                img = ImageIO.read(this.getClass().getResource("mount.jpg"));
            } catch (IOException e) {
                 System.out.println("Image could not be read");
            // System.exit(1);
            }
            */
            if (animator == null || !ingame) {
            animator = new Thread(this);
            animator.start();
            }
                    
  
        setDoubleBuffered(true);
    }
    
    public void paint(Graphics g)
{
super.paint(g);

g.setColor(Color.white);
g.fillRect(0, 0, d.width, d.height);
//g.fillOval(x,y,r,r);

//player
g.setColor(Color.red);
g.fillRect(p.x, p.y, 20, 20);
/*ImageIcon magic = new ImageIcon (this.getClass().getResource("unicorn.png"));
JLabel unicorn = new JLabel(magic);
unicorn.setBounds( p.x,p.y,20,20);*/
if (p.moveRight==true){
    p.x+=p.speed;
}
if (p.moveLeft==true){ 
    p.x-=p.speed; 
}
//pushes you back onto bord if you try to leave it
if (p.x>BOARD_WIDTH){
        p.moveLeft=true;
        p.moveRight=false; 
         }
if (p.x<0){
    p.moveLeft=false;
    p.moveRight=true;  
}
moveEnemy(); 
for (int i=0; i<army.length; i++){
    g.fillRect(army[i].x, army[i].y, 30, 30);
}
        Font small = new Font("Helvetica", Font.BOLD, 14);
        FontMetrics metr = this.getFontMetrics(small);
        g.setColor(Color.black);
       g.setFont(small);
        g.drawString(message, 10, d.height-60);

    if (ingame) {
        
    
        
       
        
    // g.drawImage(img,0,0,200,200 ,null);
     
    
   
    }
Toolkit.getDefaultToolkit().sync();
g.dispose();
}
public void moveEnemy(){
    for (int i=0; i<army.length; i++){
    if (army[i].moveLeft==true){
        army[i].x-=2; 
    }
    if (army[i].moveRight==true){
        army[i].x+=2; 
    }
    }
    for (int i=0; i<army.length; i++){
    if (army[i].x>BOARD_WIDTH){
      for (int n=0; n<army.length; n++){
        army[n].moveLeft=true;
        army[n].moveRight=false; 
        army[n].y+=5; //when army hits edge of screen move down
         }
    }
    if (army[i].x<0){
      for (int n=0; n<army.length; n++){
        army[n].moveRight=true;
        army[n].moveLeft=false; 
        army[n].y+=5;
         }
    }
    //army[i].y+=army[i].speed;
}
}
private class TAdapter extends KeyAdapter {

public void keyReleased(KeyEvent e) {
     int key = e.getKeyCode();
     p.moveRight=false;
     p.moveLeft=false; 
     
}

public void keyPressed(KeyEvent e) {
//System.out.println( e.getKeyCode());
   // message = "Key Pressed: " + e.getKeyCode();
    int key = e.getKeyCode();
        if(key==39){
          p.moveRight=true; 
        }
        else{
            p.moveRight=false;
        }
        if (key==37){
          p.moveLeft=true; 
        }
}   

}




public void mousePressed(MouseEvent e) {
    int x = e.getX();
     int y = e.getY();

}

public void mouseReleased(MouseEvent e) {

}

public void mouseEntered(MouseEvent e) {

}

public void mouseExited(MouseEvent e) {

}

public void mouseClicked(MouseEvent e) {

}

public void run() {

long beforeTime, timeDiff, sleep;

beforeTime = System.currentTimeMillis();
 int animationDelay = 15;
 long time = 
            System.currentTimeMillis();
    while (true) {//infinite loop
     // spriteManager.update();
      repaint();
      try {
        time += animationDelay;
        Thread.sleep(Math.max(0,time - 
          System.currentTimeMillis()));
      }catch (InterruptedException e) {
        System.out.println(e);
      }//end catch
    }//end while loop

    


}//end of run

}//end of class
